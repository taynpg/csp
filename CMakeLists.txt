cmake_minimum_required(VERSION 3.16)

project(csp VERSION 1.4.6 LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(config/MSystem.cmake)
if(NOT DEFINED USE_UTF8_ALL)
if (MSVC)
add_compile_options(/source-charset:utf-8)
endif()
set(COMPILER_ID ${CMAKE_CXX_COMPILER_ID})
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_SYSTEM_NAME MATCHES "Windows")
MESSAGE(STATUS "ofen Add MinGW Param.")
add_compile_options(-finput-charset=utf-8)
add_compile_options(-fexec-charset=gbk)
set(COMPILER_ID "mingw")
get_filename_component(CXX_COMPILER_PATH ${CMAKE_CXX_COMPILER} DIRECTORY)
set(MINGW32_DLLS 
"${CXX_COMPILER_PATH}/libgcc_s_dw2-1.dll"
"${CXX_COMPILER_PATH}/libstdc++-6.dll"
"${CXX_COMPILER_PATH}/libwinpthread-1.dll"
)
install(FILES ${MINGW32_DLLS} DESTINATION bin)
endif()
else()
add_definitions(-DUSE_UTF8_ALL)
endif()

set(CMAKE_DEBUG_POSTFIX "d")
message(STATUS "System: ${CMAKE_SYSTEM_NAME}")
message(STATUS "Compiler CXX ID: ${CMAKE_CXX_COMPILER_ID}")

string(TOLOWER ${COMPILER_ID} COMPILER_ID)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})

include_directories(src)
add_subdirectory(calendar)
add_subdirectory(qimen)
add_subdirectory(zhcn)
add_subdirectory(sxtwl)
add_subdirectory(base)
add_executable(csp src/main.cxx src/print.cxx src/qmuse.cxx)
target_link_libraries(csp PRIVATE zhcn calendar qm sxtwl)
if(UNAME_OUTPUT MATCHES "alpine" OR UNAME_OUTPUT MATCHES "Alpine")
message(STATUS "csp on musl static link")
target_link_libraries(csp PRIVATE -static;-static-libstdc++)
endif()

install(TARGETS csp DESTINATION bin)
# ********************************************************** pack infomation
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(ARCH_BIT "64Bit")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(ARCH_BIT "32Bit")
else()
    message(FATAL_ERROR "Unknown target architecture")
endif()
set(CPACK_PACKAGE_NAME "csp")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_CONTACT "taynpg <taynpg@163.com>")
set(CPACK_PACKAGE_DESCRIPTION "A Qimen Shipan.")
set(CPACK_PACKAGE_VENDOR "taynpg")
if(WIN32)
set(CPACK_NSIS_MODIFY_PATH ON)
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(CPACK_GENERATOR "NSIS64;ZIP")
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(CPACK_GENERATOR "NSIS;ZIP")
else()
    message(FATAL_ERROR "Unknown target architecture")
endif()
set(CPACK_NSIS_INSTALL_ROOT "$PROFILE")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "csp")
elseif(UNIX AND NOT APPLE)
    set(CPACK_GENERATOR "DEB;TGZ")
    set(CPACK_DEBIAN_PACKAGE_SECTION "utils")
    set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "taynpg <taynpg@163.com>")
elseif(APPLE)
    set(CPACK_GENERATOR "DragNDrop")
endif()
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-v${PROJECT_VERSION}-${COMPILER_ID}.${SYSTEM_ARCH}.${ARCH_BIT}")
include(CPack)