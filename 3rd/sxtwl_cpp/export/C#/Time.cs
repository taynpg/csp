//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Time : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Time(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Time obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Time obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Time() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          sxtwlPINVOKE.delete_Time(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Time() : this(sxtwlPINVOKE.new_Time__SWIG_0(), true) {
  }

  public Time(int year, int month, int day, double hour, double min, double sec) : this(sxtwlPINVOKE.new_Time__SWIG_1(year, month, day, hour, min, sec), true) {
  }

  public int Y {
    set {
      sxtwlPINVOKE.Time_Y_set(swigCPtr, value);
    } 
    get {
      int ret = sxtwlPINVOKE.Time_Y_get(swigCPtr);
      return ret;
    } 
  }

  public int M {
    set {
      sxtwlPINVOKE.Time_M_set(swigCPtr, value);
    } 
    get {
      int ret = sxtwlPINVOKE.Time_M_get(swigCPtr);
      return ret;
    } 
  }

  public int D {
    set {
      sxtwlPINVOKE.Time_D_set(swigCPtr, value);
    } 
    get {
      int ret = sxtwlPINVOKE.Time_D_get(swigCPtr);
      return ret;
    } 
  }

  public double h {
    set {
      sxtwlPINVOKE.Time_h_set(swigCPtr, value);
    } 
    get {
      double ret = sxtwlPINVOKE.Time_h_get(swigCPtr);
      return ret;
    } 
  }

  public double m {
    set {
      sxtwlPINVOKE.Time_m_set(swigCPtr, value);
    } 
    get {
      double ret = sxtwlPINVOKE.Time_m_get(swigCPtr);
      return ret;
    } 
  }

  public double s {
    set {
      sxtwlPINVOKE.Time_s_set(swigCPtr, value);
    } 
    get {
      double ret = sxtwlPINVOKE.Time_s_get(swigCPtr);
      return ret;
    } 
  }

  public int getYear() {
    int ret = sxtwlPINVOKE.Time_getYear(swigCPtr);
    return ret;
  }

  public void setYear(int year) {
    sxtwlPINVOKE.Time_setYear(swigCPtr, year);
  }

  public void setMonth(int month) {
    sxtwlPINVOKE.Time_setMonth(swigCPtr, month);
  }

  public int getMonth() {
    int ret = sxtwlPINVOKE.Time_getMonth(swigCPtr);
    return ret;
  }

  public int getDay() {
    int ret = sxtwlPINVOKE.Time_getDay(swigCPtr);
    return ret;
  }

  public void setDay(int day) {
    sxtwlPINVOKE.Time_setDay(swigCPtr, day);
  }

  public double getHour() {
    double ret = sxtwlPINVOKE.Time_getHour(swigCPtr);
    return ret;
  }

  public void setHour(double hour) {
    sxtwlPINVOKE.Time_setHour(swigCPtr, hour);
  }

  public double getMin() {
    double ret = sxtwlPINVOKE.Time_getMin(swigCPtr);
    return ret;
  }

  public void setMour(double min) {
    sxtwlPINVOKE.Time_setMour(swigCPtr, min);
  }

  public double getSec() {
    double ret = sxtwlPINVOKE.Time_getSec(swigCPtr);
    return ret;
  }

  public void setSec(double sec) {
    sxtwlPINVOKE.Time_setSec(swigCPtr, sec);
  }

}
