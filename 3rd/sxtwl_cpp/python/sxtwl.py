# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sxtwl
else:
    import _sxtwl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sxtwl.delete_SwigPyIterator

    def value(self):
        return _sxtwl.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sxtwl.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sxtwl.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sxtwl.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sxtwl.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sxtwl.SwigPyIterator_copy(self)

    def next(self):
        return _sxtwl.SwigPyIterator_next(self)

    def __next__(self):
        return _sxtwl.SwigPyIterator___next__(self)

    def previous(self):
        return _sxtwl.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sxtwl.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sxtwl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sxtwl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sxtwl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sxtwl.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sxtwl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sxtwl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sxtwl:
_sxtwl.SwigPyIterator_swigregister(SwigPyIterator)
class JDList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sxtwl.JDList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sxtwl.JDList___nonzero__(self)

    def __bool__(self):
        return _sxtwl.JDList___bool__(self)

    def __len__(self):
        return _sxtwl.JDList___len__(self)

    def __getslice__(self, i, j):
        return _sxtwl.JDList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sxtwl.JDList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sxtwl.JDList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sxtwl.JDList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sxtwl.JDList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sxtwl.JDList___setitem__(self, *args)

    def pop(self):
        return _sxtwl.JDList_pop(self)

    def append(self, x):
        return _sxtwl.JDList_append(self, x)

    def empty(self):
        return _sxtwl.JDList_empty(self)

    def size(self):
        return _sxtwl.JDList_size(self)

    def swap(self, v):
        return _sxtwl.JDList_swap(self, v)

    def begin(self):
        return _sxtwl.JDList_begin(self)

    def end(self):
        return _sxtwl.JDList_end(self)

    def rbegin(self):
        return _sxtwl.JDList_rbegin(self)

    def rend(self):
        return _sxtwl.JDList_rend(self)

    def clear(self):
        return _sxtwl.JDList_clear(self)

    def get_allocator(self):
        return _sxtwl.JDList_get_allocator(self)

    def pop_back(self):
        return _sxtwl.JDList_pop_back(self)

    def erase(self, *args):
        return _sxtwl.JDList_erase(self, *args)

    def __init__(self, *args):
        _sxtwl.JDList_swiginit(self, _sxtwl.new_JDList(*args))

    def push_back(self, x):
        return _sxtwl.JDList_push_back(self, x)

    def front(self):
        return _sxtwl.JDList_front(self)

    def back(self):
        return _sxtwl.JDList_back(self)

    def assign(self, n, x):
        return _sxtwl.JDList_assign(self, n, x)

    def resize(self, *args):
        return _sxtwl.JDList_resize(self, *args)

    def insert(self, *args):
        return _sxtwl.JDList_insert(self, *args)

    def reserve(self, n):
        return _sxtwl.JDList_reserve(self, n)

    def capacity(self):
        return _sxtwl.JDList_capacity(self)
    __swig_destroy__ = _sxtwl.delete_JDList

# Register JDList in _sxtwl:
_sxtwl.JDList_swigregister(JDList)
class JQList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _sxtwl.JQList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _sxtwl.JQList___nonzero__(self)

    def __bool__(self):
        return _sxtwl.JQList___bool__(self)

    def __len__(self):
        return _sxtwl.JQList___len__(self)

    def __getslice__(self, i, j):
        return _sxtwl.JQList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _sxtwl.JQList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _sxtwl.JQList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _sxtwl.JQList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sxtwl.JQList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sxtwl.JQList___setitem__(self, *args)

    def pop(self):
        return _sxtwl.JQList_pop(self)

    def append(self, x):
        return _sxtwl.JQList_append(self, x)

    def empty(self):
        return _sxtwl.JQList_empty(self)

    def size(self):
        return _sxtwl.JQList_size(self)

    def swap(self, v):
        return _sxtwl.JQList_swap(self, v)

    def begin(self):
        return _sxtwl.JQList_begin(self)

    def end(self):
        return _sxtwl.JQList_end(self)

    def rbegin(self):
        return _sxtwl.JQList_rbegin(self)

    def rend(self):
        return _sxtwl.JQList_rend(self)

    def clear(self):
        return _sxtwl.JQList_clear(self)

    def get_allocator(self):
        return _sxtwl.JQList_get_allocator(self)

    def pop_back(self):
        return _sxtwl.JQList_pop_back(self)

    def erase(self, *args):
        return _sxtwl.JQList_erase(self, *args)

    def __init__(self, *args):
        _sxtwl.JQList_swiginit(self, _sxtwl.new_JQList(*args))

    def push_back(self, x):
        return _sxtwl.JQList_push_back(self, x)

    def front(self):
        return _sxtwl.JQList_front(self)

    def back(self):
        return _sxtwl.JQList_back(self)

    def assign(self, n, x):
        return _sxtwl.JQList_assign(self, n, x)

    def resize(self, *args):
        return _sxtwl.JQList_resize(self, *args)

    def insert(self, *args):
        return _sxtwl.JQList_insert(self, *args)

    def reserve(self, n):
        return _sxtwl.JQList_reserve(self, n)

    def capacity(self):
        return _sxtwl.JQList_capacity(self)
    __swig_destroy__ = _sxtwl.delete_JQList

# Register JQList in _sxtwl:
_sxtwl.JQList_swigregister(JQList)
J2000 = _sxtwl.J2000
class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sxtwl.Time_swiginit(self, _sxtwl.new_Time(*args))
    Y = property(_sxtwl.Time_Y_get, _sxtwl.Time_Y_set)
    M = property(_sxtwl.Time_M_get, _sxtwl.Time_M_set)
    D = property(_sxtwl.Time_D_get, _sxtwl.Time_D_set)
    h = property(_sxtwl.Time_h_get, _sxtwl.Time_h_set)
    m = property(_sxtwl.Time_m_get, _sxtwl.Time_m_set)
    s = property(_sxtwl.Time_s_get, _sxtwl.Time_s_set)

    def getYear(self):
        return _sxtwl.Time_getYear(self)

    def setYear(self, year):
        return _sxtwl.Time_setYear(self, year)

    def setMonth(self, month):
        return _sxtwl.Time_setMonth(self, month)

    def getMonth(self):
        return _sxtwl.Time_getMonth(self)

    def getDay(self):
        return _sxtwl.Time_getDay(self)

    def setDay(self, day):
        return _sxtwl.Time_setDay(self, day)

    def getHour(self):
        return _sxtwl.Time_getHour(self)

    def setHour(self, hour):
        return _sxtwl.Time_setHour(self, hour)

    def getMin(self):
        return _sxtwl.Time_getMin(self)

    def setMour(self, min):
        return _sxtwl.Time_setMour(self, min)

    def getSec(self):
        return _sxtwl.Time_getSec(self)

    def setSec(self, sec):
        return _sxtwl.Time_setSec(self, sec)
    __swig_destroy__ = _sxtwl.delete_Time

# Register Time in _sxtwl:
_sxtwl.Time_swigregister(Time)
class GZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sxtwl.GZ_swiginit(self, _sxtwl.new_GZ(*args))
    tg = property(_sxtwl.GZ_tg_get, _sxtwl.GZ_tg_set)
    dz = property(_sxtwl.GZ_dz_get, _sxtwl.GZ_dz_set)
    __swig_destroy__ = _sxtwl.delete_GZ

# Register GZ in _sxtwl:
_sxtwl.GZ_swigregister(GZ)
class Day(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def fromSolar(_year, _month, _day):
        return _sxtwl.Day_fromSolar(_year, _month, _day)

    @staticmethod
    def fromLunar(year, month, day, isRun=False):
        return _sxtwl.Day_fromLunar(year, month, day, isRun)

    def after(self, day):
        return _sxtwl.Day_after(self, day)

    def before(self, day):
        return _sxtwl.Day_before(self, day)

    def getLunarDay(self):
        return _sxtwl.Day_getLunarDay(self)

    def getLunarMonth(self):
        return _sxtwl.Day_getLunarMonth(self)

    def getLunarYear(self, chineseNewYearBoundary=True):
        return _sxtwl.Day_getLunarYear(self, chineseNewYearBoundary)

    def getYearGZ(self, chineseNewYearBoundary=False):
        return _sxtwl.Day_getYearGZ(self, chineseNewYearBoundary)

    def getMonthGZ(self):
        return _sxtwl.Day_getMonthGZ(self)

    def getDayGZ(self):
        return _sxtwl.Day_getDayGZ(self)

    def getHourGZ(self, hour, isZaoWanZiShi=True):
        return _sxtwl.Day_getHourGZ(self, hour, isZaoWanZiShi)

    def isLunarLeap(self):
        return _sxtwl.Day_isLunarLeap(self)

    def getSolarYear(self):
        return _sxtwl.Day_getSolarYear(self)

    def getSolarMonth(self):
        return _sxtwl.Day_getSolarMonth(self)

    def getSolarDay(self):
        return _sxtwl.Day_getSolarDay(self)

    def getWeek(self):
        return _sxtwl.Day_getWeek(self)

    def getWeekIndex(self):
        return _sxtwl.Day_getWeekIndex(self)

    def hasJieQi(self):
        return _sxtwl.Day_hasJieQi(self)

    def getJieQi(self):
        return _sxtwl.Day_getJieQi(self)

    def getJieQiJD(self):
        return _sxtwl.Day_getJieQiJD(self)

    def getConstellation(self):
        return _sxtwl.Day_getConstellation(self)
    __swig_destroy__ = _sxtwl.delete_Day

# Register Day in _sxtwl:
_sxtwl.Day_swigregister(Day)
class JieQiInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    jd = property(_sxtwl.JieQiInfo_jd_get, _sxtwl.JieQiInfo_jd_set)
    jqIndex = property(_sxtwl.JieQiInfo_jqIndex_get, _sxtwl.JieQiInfo_jqIndex_set)

    def __init__(self):
        _sxtwl.JieQiInfo_swiginit(self, _sxtwl.new_JieQiInfo())
    __swig_destroy__ = _sxtwl.delete_JieQiInfo

# Register JieQiInfo in _sxtwl:
_sxtwl.JieQiInfo_swigregister(JieQiInfo)

def fromSolar(year, month, day):
    return _sxtwl.fromSolar(year, month, day)

def fromLunar(year, month, day, isRun=False):
    return _sxtwl.fromLunar(year, month, day, isRun)

def siZhu2Year(year, yue, ri, shi, fromYear, toYear):
    return _sxtwl.siZhu2Year(year, yue, ri, shi, fromYear, toYear)

def getShiGz(dayTg, hour, isZaoWanZiShi=True):
    return _sxtwl.getShiGz(dayTg, hour, isZaoWanZiShi)

def getRunMonth(By):
    return _sxtwl.getRunMonth(By)

def getLunarMonthNum(By, month, isRun=False):
    return _sxtwl.getLunarMonthNum(By, month, isRun)

def JD2DD(jd):
    return _sxtwl.JD2DD(jd)

def toJD(time):
    return _sxtwl.toJD(time)

def getJieQiByYear(year):
    return _sxtwl.getJieQiByYear(year)

